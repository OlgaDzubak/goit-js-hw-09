{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEYC,SAASC,cAAc,yBAC/BC,iBAAiB,SAEA,SAADC,GAClBA,EAAMC,iBACN,IAAIC,EAAaL,SAASC,cAAc,uBAAuBK,cAC3DC,EAAYP,SAASC,cAAc,sBAAsBK,cACzDE,EAASR,SAASC,cAAc,wBAAwBK,cACxDG,EAAW,EAEVJ,IAAaA,EAAa,GAC1BE,IAAYA,EAAY,GACxBC,IAASA,EAAS,GAEvB,IAAIE,EAAQL,EAERG,IACFG,WAAaC,aAAY,KAa7B,IAAuBC,EAAUC,GAAVD,EAXHJ,EAWaK,EAXHJ,EAaZ,IAAIK,SAAQ,CAACC,EAASC,KAEpC,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACH,E,MAAUC,IAEnBG,EAAO,C,SAACJ,E,MAAUC,GAAO,GAE1BA,EAAM,KAtBJQ,MAAM,EAACT,SAACA,EAAQC,MAAEA,MAAaS,EAAAzB,GAAS0B,OAAOC,QAAQ,uBAAqBZ,QAAiBC,MAAU,IACrGY,OAAI,EAACb,SAACA,EAAQC,MAAEA,MAAaS,EAAAzB,GAAS0B,OAAOG,QAAQ,sBAAoBd,QAAiBC,MAAU,IAErGJ,EAAML,EAAaE,EAAYE,EACjCA,GAAY,EACRA,EAAWD,GAASoB,cAAcjB,WAAW,GAClD,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst btn = document.querySelector('button[type=\"submit\"]');     // Посилання на кнопку \"Create promise\"\nbtn.addEventListener('click', onBtnClick);                       // Додаємо слухач на кнопку \"Create promise\"\n\nfunction onBtnClick(event){                                      // Функція, що виконується при кліку на кнопку \"Create promise\"\n  event.preventDefault();\n  let delayFirst = document.querySelector('input[name=\"delay\"]').valueAsNumber; // Забираємо значення першої затримки з інпуту delay\n  let delayStep = document.querySelector('input[name=\"step\"]').valueAsNumber;   // Забираємо значення подальших затримок з інпуту step\n  let amount = document.querySelector('input[name=\"amount\"]').valueAsNumber;    // Забираємо значення кількості промісів з інпуту amount\n  let position = 1;                                                             // рахувальник ітерацій\n  \n  if (!delayFirst) {delayFirst = 0;}\n  if (!delayStep) {delayStep = 0;}\n  if (!amount) {amount = 0;}\n\n  let delay = delayFirst;\n\n  if (amount){\n    intervalId = setInterval(()=>{                                                  // створюємо функцію setInterval і виконуємо її із затримокю delay до тих пір, поки position<=amount\n      \n      createPromise(position, delay)\n        .then( ({position, delay}) => { Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);})\n        .catch(({position, delay}) => { Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms` );});\n              \n        delay = delayFirst + delayStep * position;\n        position += 1;\n        if (position > amount) {clearInterval(intervalId);}\n    }, 0);\n  }\n} \n\nfunction createPromise(position, delay) {                       // Функція створення проміса номер=position із затримкою delay\n  \n  const promise = new Promise((resolve, reject) => {\n    \n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n\n  });\n  return promise;\n}"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delayFirst","valueAsNumber","delayStep","amount","position1","delay1","intervalId","setInterval","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure","clearInterval"],"version":3,"file":"03-promises.f3007588.js.map"}